/*
 * Copyright (c) 2020, UCLA JCCC
 *
 */
 
  
/* 
 * 'Call-mtSNV' - A Nextflow pipeline for somatic mtSNV (heteroplasmy) calling with NGS data
 * 
 * Takafumi Yamaguchi
 * Andrew Park
 * Paul Boutros
 */

/*
 * Define the default docker images
 */ 

def bamql = "blcdsdockerregistry/bamql:1.5"
//def mtoolbox = "blcdsdockerregistry/mtoolbox:x"
//def mitocaller = "blcdsdockerregistry/mitocaller:x"

/*
 * Default parameters should be defined in config
 */ 


log.info """\
C A L L I N G S  -  N F    v 1.0 
================================
Testing
"""

/*
 *  Defines the reads channel 
 */

Channel
    .fromPath('input.csv')//params.input_csv)
    .ifEmpty { exit 1, "params.input_csv was empty - no input files supplied" }
    .splitCsv(header:true) 
    .map{ row -> tuple(row.type, file(row.bam)) }
    .set { input_ch }

// get the query from param
Channel
   .value(params.query)
   .ifEmpty { error "Cannot find bamql query: ${params.query}" }
   .set { input_ch_mt_reads_extraction_query }

/**********
 * PART 1: Extract MT reads
 *
 * Process 1: Use bamql to extract reads mapped to mitochondria genome in the input BAM (hg19/GRCh37)
 * This stage is quite fast and memory efficient (it only takes a few min to process one BAM)
 */

process extract_reads { 
  container bamql

  publishDir "${params.output_dir}", enabled: true, mode: 'copy'

  tag "Extract MT Reads"
 
  input:
    tuple(val(type), path(input_bam)) from input_ch
    each params.query from input_ch_mt_reads_extraction_query

  output: 
    file("${input_bam.baseName}-${type}-mt.bam") into next_stage
  
  script:
  """
  bamql -b \
      -o ${input_bam.baseName}-${type}-mt.bam \
      -f ${input_bam} \
      ' ${params.query} '
  """
}

/*
 *  END OF PART 1
 *********/


/**********
 * PART 2: MToolBox
 *
 * Process 1: Run MToolBox.sh on the BAMs generated in the ExtractReads stage. 
 * MToolBox remaps the reads to RCRS or RSRS mt genome. Current default is RSRS.
 * This stage is a bit memory intensive and requires 4 cores * 13G as default. 
 * You can change the number of cores and memory in the stage parameter YAML.
 * This stage takes a few hours depending on the BAM file size.
*/

process mtoolbox {
// Check for the file location
  container "blcdsdockerregistry/mtoolbox:v1.0.0"
  containerOptions "-v ${params.mito_ref}:${params.rsrs_out} -v ${params.output_dir}:${params.extract_reads_out}"

  publishDir "${params.output_dir}", enabled: true, mode: 'copy'
  label 'MToolBox'

  input:
  file bam from next_stage

  script:
  """
  pushd /src/MToolBox
  printf "input_type=${params.input_file_type}\nref=${params.mt_ref_type}\ninput_path=${params.extract_reads_out}\noutput_name=${params.rsrs_out}" > ${params.extract_reads_out}/config.sh
  ./MToolBox.sh -i ${params.extract_reads_out}/config.sh -m '-t 4'
  """
}

/*
 *  END OF PART 2
 *********/


/**********
 * PART 3: mitoCaller
 *
 * Process 1:.mitoCaller will be run on the GSNAP-ed BAMs generated by MToolBox.
 * It takes a few hours depending on the BAM file size.


process 'mitocaller' {
  tag "$genome.baseName"

  input:
    path genome from params.genome
  output:
    path "genome_dir" into genome_dir_ch

  script:
  """
  mkdir genome_dir
  STAR --runMode genomeGenerate \
       --genomeDir genome_dir \
       --genomeFastaFiles ${genome} \
       --runThreadN ${task.cpus}
  """
}

/*
 *  END OF PART 3
 *********/


/**********
 * PART 4: call heteroplasmy
 *
 * CallHeteroplasmyh.Compute heteroplasmy from the mitoCaller outputs.i. It only takes a few min.
 * Thresholds ( min_coverage: 100, heteroplasmy_fraction_diff: 0.2) were decided based on Julia's work and can be configured in the stage parameter YAML.

process '1D_prepare_vcf_file' {
  tag "$variantsFile.baseName"

  input: 
    path variantsFile from params.variants
    path blacklisted from params.blacklist

  output:
    tuple \
      path("${variantsFile.baseName}.filtered.recode.vcf.gz"), \
      path("${variantsFile.baseName}.filtered.recode.vcf.gz.tbi") into prepared_vcf_ch
  
  script:  
  """
  vcftools --gzvcf $variantsFile -c \
           --exclude-bed ${blacklisted} \
           --recode | bgzip -c \
           > ${variantsFile.baseName}.filtered.recode.vcf.gz
  tabix ${variantsFile.baseName}.filtered.recode.vcf.gz
  """
}
*/
