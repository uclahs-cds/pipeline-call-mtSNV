import nextflow.util.SysHelper

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.max_cpus as int)
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

max_number_of_cpus_available = (int) (Runtime.getRuntime().availableProcessors())
if (max_number_of_cpus_available < 1) {
    max_number_of_cpus_available = 1
} 

max_amount_of_memory_available = ((int) (((java.lang.management.ManagementFactory.getOperatingSystemMXBean()
    .getTotalPhysicalMemorySize() / (1024.0 * 1024.0 * 1024.0)) * 0.9)))
if (max_amount_of_memory_available < 1) {
    max_amount_of_memory_available = 1
}

// Load cluster specif config
if (params.ucla_cds == true) {
    includeConfig "${projectDir}/config/ucla-cds-base.config"

    node_cpus = params.max_cpus
    node_memory = params.max_memory.toString()

    // Slurm and SGE clusters have slightly different memory values presented
    if (node_cpus == 2 && (node_memory == '3 GB' || node_memory == '3.9 GB')) {
        includeConfig "${projectDir}/config/F2.config"
    } else if (node_cpus == 72 && (node_memory == '136.8 GB' || node_memory == '141.7 GB')) {
        includeConfig "${projectDir}/config/F72.config"
    } else if (node_cpus == 64 && (node_memory == '950 GB' || node_memory == '1007.9 GB')) {
        includeConfig "${projectDir}/config/M64.config"
    } else { 
        includeConfig "${projectDir}/config/F2.config";
        System.out.println("### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory}), unable to assign resources. Will use available memory and cpus for pipeline run.")
    }
} else if (params.ucla_cds == false) {
    includeConfig "${projectDir}/config/base.config"
} else {
    throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory}), unable to assign resources. Check nextflow.config params.ucla_cds value")
}