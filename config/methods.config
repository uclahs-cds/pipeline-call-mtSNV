import nextflow.util.SysHelper

methods {

    // Function to ensure that resource requirements don't go beyond
    // a maximum limit
    check_max = { obj, type ->
        if (type == 'memory') {
            try {
                if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                    return params.max_memory as nextflow.util.MemoryUnit
                else
                    return obj
            } catch (all) {
                println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
                return obj
                }
        } else if (type == 'time') {
            try {
                if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                    return params.max_time as nextflow.util.Duration
                else
                    return obj
            } catch (all) {
                println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
                return obj
                }
        } else if (type == 'cpus') {
            try {
                return Math.min(obj, params.max_cpus as int)
            } catch (all) {
                println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
                return obj
                }
            }
        }

    // Load cluster specific config
    set_resources_allocation =  {

        if (params.ucla_cds == true) {
            node_cpus = params.max_cpus
            node_memory = params.max_memory.toString()

            // Slurm and SGE clusters have slightly different memory values presented
            if (node_cpus == 2 && (node_memory == '3 GB' || node_memory == '3.9 GB')) {
                includeConfig "${projectDir}/config/lowmem.config"
            } else if (node_cpus == 32 && (node_memory == '60.8 GB' || node_memory == '62.8 GB')) {
                includeConfig "${projectDir}/config/F32.config"
            } else if (node_cpus == 72 && (node_memory == '136.8 GB' || node_memory == '141.7 GB')) {
                includeConfig "${projectDir}/config/F72.config"
            } else if (node_cpus == 64 && (node_memory == '950 GB' || node_memory == '1007.9 GB')) {
             includeConfig "${projectDir}/config/M64.config"
            } 
        } else if (params.ucla_cds == false) {
            includeConfig "${projectDir}/config/base.config"
         } else {
            throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory}), unable to assign resources. Check nextflow.config params.ucla_cds value")
            }
        }

    def tz = TimeZone.getTimeZone("UTC")
    def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)
    params.date = "${date}"
        

    set_ids_from_csv = {
        def sample

        def reader = new FileReader(params.input_csv)
        reader.splitEachLine(',') { parts -> [sample = parts[1]] }
        
        params.sample_id = "${sample}"
        }
    
    set_output_dir = { 
        params.base_output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id}/${params.mitocaller_version}/" 
        params.nextflow_log_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id}/log-${manifest.name}-${manifest.version}-$date/"
        params.log_output_dir = "${params.nextflow_log_dir}/process-log/"
        }


    set_pipeline_logs = {
        timeline.enabled = true
        timeline.file = "${params.nextflow_log_dir}/nextflow-log/timeline.html"

        trace.enabled = true
        trace.file = "${params.nextflow_log_dir}/nextflow-log/trace.txt"

        report.enabled = true
        report.file =  "${params.nextflow_log_dir}/nextflow-log/report.html"
        }

    setup = {
        methods.set_resources_allocation()
        methods.set_ids_from_csv()
        methods.set_output_dir()
        methods.set_pipeline_logs()
        }
    }



