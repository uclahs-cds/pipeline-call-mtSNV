///// methods invocation ///////
import nextflow.util.SysHelper

methods {
    set_date = {
        def tz = TimeZone.getTimeZone("UTC")
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)

        params.date = "${date}"
    }
    setup = {
        methods.set_date()
        }
}

methods.setup()

///// docker ////////
docker {
    enabled = true
    sudo = (params.sge_scheduler)
        
    // Pass user's UID/GID and group IDs to Docker
    uid_and_gid = "-u \$(id -u):\$(id -g)"
    all_group_ids = "\$(for i in `id --real --groups`; do echo -n \"--group-add=\$i \"; done)"

    runOptions = "${uid_and_gid} ${all_group_ids}"
    }
  
params { 
    validate_docker_image = "blcdsdockerregistry/validate:2.1.5"
    BAMQL_docker_image = "blcdsdockerregistry/bamql:1.6.1"
    MToolBox_docker_image = "blcdsdockerregistry/mtoolbox:1.2.1-b52269e"
    mitocaller_docker_image = "blcdsdockerregistry/mitocaller:1.0.0"
    mitoCaller2vcf_docker_image = "blcdsdockerregistry/mitocaller2vcf:1.0.0"
    heteroplasmy_script_docker_image = "blcdsdockerregistry/call-heteroplasmy-script:1.0.1"

    base_output_dir = "${params.output_dir}/${workflow.manifest.name}-${workflow.manifest.version}/${params.run_name}" 
    log_output_dir = "${params.base_output_dir}/log-${workflow.manifest.name}-${workflow.manifest.version}-$date/"

    // tools and their versions
    mtoolbox_version = "MToolBox-1.2.1"
    call_heteroplasmy_version = "call-heteroplasmy-1.0.1"
    mitocaller_version = "MitoCaller-1.0.0"
    mitoCaller2vcf_version = "mitoCaller2vcf-1.0.0"
    bamql_version = "bamql-1.6.1"
}

///// pipeline monitoring and metric files ////////
timeline {
    enabled = true
    file = "${params.log_output_dir}/nextflow-log/timeline.html"
}

trace {
    enabled = true
    file = "${params.log_output_dir}/nextflow-log/trace.txt"
}

report {
    enabled = true
    file = "${params.log_output_dir}/nextflow-log/report.html"
}

////////////// process info /////////////
process {
    // monitor process jobs with local (not slurm) executor    
    if (params.sge_scheduler == true) {
        executor = "local"
        }
    echo = true
    cache = params.cache_intermediate_pipeline_steps
}
