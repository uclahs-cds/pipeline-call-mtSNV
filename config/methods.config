import nextflow.util.SysHelper
import nextflow.Nextflow
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/methods/common_methods.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/schema/schema.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/bam/bam_parser.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/retry/retry.config"

methods {

    set_input_type = {
        params.input_type = 'none'
        def bam_input = params.input.collect({ sample_type, sample -> sample.data }).every({data_path -> data_path.toLowerCase().endsWith("bam")})
        def cram_input = params.input.collect({ sample_type, sample -> sample.data }).every({data_path -> data_path.toLowerCase().endsWith("cram")})
        if (bam_input == cram_input) {
            log.error "Samples must be either all CRAM format or all BAM format."
            throw new Exception("invalid sample format.")
        }
        if (bam_input) {
            params.input_type = 'BAM'
            params.validate_extra_args = ''
        }
        if (cram_input) {
            params.input_type = 'CRAM'
            params.validate_extra_args = "-r ${params.reference_genome}"
            process['withName:validate_input'].containerOptions = "--volume ${Nextflow.file(params.reference_genome).getParent()}:${Nextflow.file(params.reference_genome).getParent()}"
        }
    }

    prepare_input = {
        // transform input into list format
        methods.set_input_type()
        params.input_channel_list = []
        params.input.each {
            sample_type, sample ->
            def entry_map = [
                'sample_type': sample_type,
                'sample_id': sample.sample_id,
                'sample_data': sample.data
                ]
            params.input_channel_list.add(entry_map)
            }
        // set sample mode
        switch (params.input_channel_list.size()) {
            case 0:
                log.error "No samples provided"
                break
            case 1:
                params.sample_mode = 'single'
                params.sample_id = params.input_channel_list[0].sample_id
                break
            case 2:
                params.sample_mode = 'paired'
                params.sample_id = params.input_channel_list.find({ it.sample_type == 'tumor' }).sample_id
                break
            }
        // create info string for log
        params.input_string = ''
        params.input.each {
            entry ->
            params.input_string <<= entry.key << ": " << entry.value.data << "\n\s\s\s\s\s\s\s\s"
            }
        params.input_string = params.input_string.toString().trim()
        }

    set_output_dir = {
        def tz = TimeZone.getTimeZone("UTC")
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)
        params.date = "${date}"

        params.output_dir_prefix = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id}"
        params.output_dir_base = "${params.output_dir_prefix}/mitoCaller-${params.mitocaller_version}/"
        params.nextflow_log_dir = "${params.output_dir_prefix}/log-${manifest.name}-${manifest.version}-${date}/"
        params.log_output_dir = "${params.nextflow_log_dir}process-log/"
        }


    set_pipeline_logs = {
        timeline.enabled = true
        timeline.file = "${params.nextflow_log_dir}nextflow-log/timeline.html"

        trace.enabled = true
        trace.file = "${params.nextflow_log_dir}nextflow-log/trace.txt"

        report.enabled = true
        report.file =  "${params.nextflow_log_dir}nextflow-log/report.html"
        }


    modify_base_allocations = {
        if (!(params.containsKey('base_resource_update') && params.base_resource_update)) {
            return
        }

        params.base_resource_update.each { resource, updates ->
            updates.each { processes, multiplier ->
                def processes_to_update = (custom_schema_types.is_string(processes)) ? [processes] : processes
                methods.update_base_resource_allocation(resource, multiplier, processes_to_update)
            }
        }
    }

    setup = {
        schema.load_custom_types("${projectDir}/external/pipeline-Nextflow-config/config/schema/custom_schema_types.config")
        schema.load_custom_types("${projectDir}/config/custom_schema_types.config")
        schema.validate()
        methods.set_resources_allocation()
        methods.modify_base_allocations()
        methods.setup_docker_cpus()
        retry.setup_retry()
        methods.prepare_input()
        methods.set_output_dir()
        methods.set_pipeline_logs()
        methods.set_env()
        }
    }



