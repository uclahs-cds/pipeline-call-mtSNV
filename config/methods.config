import nextflow.util.SysHelper
import nextflow.Nextflow
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/methods/common_methods.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/schema/schema.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/retry/retry.config"

methods {

    set_input_type = {
        params.input_type = 'none'
        if (!params.input.containsKey('BAM') && !params.input.containsKey('CRAM')) {
            throw new Exception("Error. No samples provided.")
        }
        if (params.input.containsKey('BAM') && params.input.containsKey('CRAM')) {
            throw new Exception("Invalid sample format. Samples must be either all CRAM format or all BAM format.")
        }
        if (params.input.containsKey('BAM')) {
            params.input_type = 'BAM'
            params.validate_extra_args = ''
        }
        if (params.input.containsKey('CRAM')) {
            params.input_type = 'CRAM'
            params.validate_extra_args = "-r ${params.cram_reference_genome}"

            def cram_reference_mount_path = "--volume ${Nextflow.file(params.cram_reference_genome).getParent()}:${Nextflow.file(params.cram_reference_genome).getParent()}"

            if ( process['withName:validate_input'].containsKey('containerOptions')) {
                process['withName:validate_input'].containerOptions <<= " " << cram_reference_mount_path
            }
            else {
                process['withName:validate_input'].containerOptions = cram_reference_mount_path
            }
            if ( process['withName:extract_mtDNA_SAMtools'].containsKey('containerOptions')) {
                process['withName:extract_mtDNA_SAMtools'].containerOptions <<= " " << cram_reference_mount_path
            }
            else {
                process['withName:extract_mtDNA_SAMtools'].containerOptions = cram_reference_mount_path
            }
        }
    }

    get_index_file = { file_name ->
        def index_extension_map = [
        '.bam' : '.bai',
        '.cram' : '.crai'
        ]

        def base_name = file_name.substring(0, file_name.lastIndexOf('.'))
        def file_extension = file_name - base_name
        if (!index_extension_map.containsKey(file_extension)){
            throw new Exception("Invalid file type. ${file_name} is not supported")
            }
        def index_extension = index_extension_map[file_extension]
        def index_file_name = file_name+index_extension

        def index_file = Nextflow.file(index_file_name)
        if(index_file.exists()) {
            return index_file_name
            }

        index_file_name = base_name+index_extension
        index_file = Nextflow.file(index_file_name)
        if(index_file.exists()) {
            return index_file_name
            }
        else {
            throw new Exception("Index file for ${file_name} not found.")
            }
    }

    prepare_input = {
        // transform input into list format
        methods.set_input_type()
        params.input_channel_list = []
        params.input[params.input_type].each {
            sample_type, sample ->
            def entry_map = [
                'sample_type': sample_type,
                'sample_id': sample.sample_id,
                'sample_data': sample.path,
                'sample_index': methods.get_index_file(sample.path)
                ]
            params.input_channel_list.add(entry_map)
            }
        // set sample mode
        switch (params.input_channel_list.size()) {
            case 0:
                log.error "No samples provided"
                break
            case 1:
                params.sample_mode = 'single'
                params.sample_id = params.input_channel_list[0].sample_id
                break
            case 2:
                params.sample_mode = 'paired'
                params.sample_id = params.input_channel_list.find({ it.sample_type == 'tumor' }).sample_id
                break
            }

        params.input_list = params.input_channel_list.collect{ tuple -> tuple.values() }
        params.validation_list =params.input_channel_list.collect { tuple -> [tuple.sample_data, tuple.sample_index] }
        // create info string for log
        params.input_string = ''
        params.input[params.input_type].each {
            entry ->
            params.input_string <<= entry.key << ": " << entry.value.path << "\n\s\s\s\s\s\s\s\s"
            }
        params.input_string = params.input_string.toString().trim()
        }

    set_output_dir = {
        def tz = TimeZone.getTimeZone("UTC")
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)
        params.date = "${date}"

        params.output_dir_prefix = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id}"
        params.output_dir_base = "${params.output_dir_prefix}/mitoCaller-${params.mitocaller_version}/"
        params.log_output_dir = "${params.output_dir_prefix}/log-${manifest.name}-${manifest.version}-${date}"
        }


    set_pipeline_logs = {
        timeline.enabled = true
        timeline.file = "${params.log_output_dir}/nextflow-log/timeline.html"

        trace.enabled = true
        trace.file = "${params.log_output_dir}/nextflow-log/trace.txt"

        report.enabled = true
        report.file =  "${params.log_output_dir}/nextflow-log/report.html"
        }


    modify_base_allocations = {
        if (!(params.containsKey('base_resource_update') && params.base_resource_update)) {
            return
        }

        params.base_resource_update.each { resource, updates ->
            updates.each { processes, multiplier ->
                def processes_to_update = (custom_schema_types.is_string(processes)) ? [processes] : processes
                methods.update_base_resource_allocation(resource, multiplier, processes_to_update)
            }
        }
    }

    setup_mtDNA_extraction = {
        def region_map = [
            'GRCh37': "59000000",
            'GRCh38': "57000000"
            ]

        params.chrY_extraction_region = region_map[params.reference_genome_version]
    }

    setup = {
        schema.load_custom_types("${projectDir}/external/pipeline-Nextflow-config/config/schema/custom_schema_types.config")
        schema.load_custom_types("${projectDir}/config/custom_schema_types.config")
        schema.validate()
        methods.set_resources_allocation()
        methods.modify_base_allocations()
        methods.setup_docker_cpus()
        retry.setup_retry()
        methods.prepare_input()
        methods.setup_mtDNA_extraction()
        methods.set_output_dir()
        methods.set_pipeline_logs()
        methods.set_env()
        methods.setup_process_afterscript()
        }
    }



