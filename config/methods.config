import nextflow.util.SysHelper
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/methods/common_methods.config"

methods {

    // Function to ensure that resource requirements don't go beyond
    // a maximum limit
    check_max = { obj, type ->
        if (type == 'memory') {
            try {
                if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                    return params.max_memory as nextflow.util.MemoryUnit
                else
                    return obj
            } catch (all) {
                println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
                return obj
                }
        } else if (type == 'time') {
            try {
                if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                    return params.max_time as nextflow.util.Duration
                else
                    return obj
            } catch (all) {
                println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
                return obj
                }
        } else if (type == 'cpus') {
            try {
                return Math.min(obj, params.max_cpus as int)
            } catch (all) {
                println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
                return obj
                }
            }
        }

    set_ids_from_csv = {
        def sample

        def reader = new FileReader(params.input_csv)
        reader.splitEachLine(',') { parts -> [sample = parts[1]] }

        params.sample_id = "${sample}"
        }

    set_output_dir = {
        def tz = TimeZone.getTimeZone("UTC")
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)
        params.date = "${date}"

        params.nextflow_log_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id}/log-${manifest.name}-${manifest.version}-$date/"
        params.output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id}/mitoCaller-${params.mitocaller_version}/" 
        params.log_output_dir = "${params.nextflow_log_dir}/process-log/"
        }


    set_pipeline_logs = {
        timeline.enabled = true
        timeline.file = "${params.nextflow_log_dir}/nextflow-log/timeline.html"

        trace.enabled = true
        trace.file = "${params.nextflow_log_dir}/nextflow-log/trace.txt"

        report.enabled = true
        report.file =  "${params.nextflow_log_dir}/nextflow-log/report.html"
        }

    check_workdir_permissions = { dir ->
        dir_file = new File(dir)
        if (dir_file.exists()) {
            if (dir_file.canWrite()) {
                return true
            } else {
                throw new Exception("   ### ERROR ###   The input directory params.work_dir: ${dir} is not writeable. Please verify and try again.")
            }
        } else {
            while (!dir_file.exists()) {
                dir_file = dir_file.getParentFile()
            }

        if (dir_file.canWrite()) {
            return true
        } else {
            throw new Exception("   ### ERROR ###   The input directory params.work_dir: ${dir} cannot be created. The closest existing parent directory ${dir_file.toString()} is not writable. Please verify permissions or change the input parameter.")
        }
        }
    }

    set_env = {
        if (params.ucla_cds) {
        /**
            * By default, if the /scratch directory exists, set it as the Nextflow working directory
            * If config file specified work_dir, set it as the Nextflow working directory
            *
            * WARNING: changing this directory can lead to high server latency and
            * potential disk space limitations. Change with caution! The 'workDir'
            * in Nextflow determines the location of intermediate and temporary files.
            */
            params.work_dir = (params.containsKey("work_dir") && params.work_dir) ? params.work_dir : "/scratch"
            if (methods.check_workdir_permissions(params.work_dir)) {
                workDir = params.work_dir
            }
        } else {
            // If work_dir was specified as a param and exists or can be created, set workDir. Otherwise, let Nextflow's default behavior dictate workDir
            if (params.containsKey("work_dir") && params.work_dir && methods.check_workdir_permissions(params.work_dir)) {
                workDir = params.work_dir
            } else {
                params.work_dir = "${launchDir}/work"
            }
        }
    }

    setup = {
        methods.set_resources_allocation()
        methods.set_ids_from_csv()
        methods.set_output_dir()
        methods.set_pipeline_logs()
        methods.set_env()
        }
    }



