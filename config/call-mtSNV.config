//Metadata
manifest {
    name = "call-mtSNV"
    author = "Takafumi Yamaguchi; Nextflowization by Alfredo Enrique Gonzalez "
    description = "Pipeline for calling mitochonrdial SNVs"
    version = "1.0"
}

//Enabling Docker

docker {
    enabled = true
    sudo = (params.sge_scheduler) ? true : false // Set to true if run on SGE
    
    // Pass user's UID/GID and group IDs to Docker
    uid_and_gid = "-u \$(id -u):\$(id -g)"
    all_group_ids = "\$(for i in `id --real --groups`; do echo -n \"--group-add=\$i \"; done)"

    runOptions = "${uid_and_gid} ${all_group_ids}"
}
// Global default params, used in configs

params {
    // sample inputs
    input_csv = " " //refer to template csv

    // input/output locations
    output_dir = " " // 
    temp_dir = " " //
    log_output_dir = " " //

    // References
    reference_genome_hg38 = '../genome.fa'
    mt_ref = '' //location of chrRSRS.fasta
    gmapdb = '/data/users/agonzalez/002_Nextflowization_mtSNV/01_Version_1.0/01_pipeline/SGE/output/gmapdb/'
    genome_fasta = '/data/users/agonzalez/002_Nextflowization_mtSNV/01_Version_1.0/01_pipeline/SGE/output/genome_fasta/'

    // Supplemental Scripts 
    
    suplemental_scripts = '' // location of folder within pipeline release containing suplemental scripts                                                                                                             

    //Single or Paired?
    sample_mode = '' // 'single' or 'paired'

    save_intermediate_files = false
    cache_intermediate_pipeline_steps = true

    // resource configuraton for entire pipeline
    max_number_of_parallel_jobs = 2


}

// location of Nextflow temp directories  
workDir = params.temp_dir
NXF_WORK = params.temp_dir
NXF_TEMP = params.temp_dir
NXF_HOME = params.temp_dir


process {
    // monitor process jobs with local (not slurm) executor
    executor = "local"

    // total amount of resources avaible to the pipeline
    maxForks = params.max_number_of_parallel_jobs

    // echo stdout of each step to stdout of pipeline
    echo = true
    cache = params.cache_intermediate_pipeline_steps

}

// pipeline monitoring and metric files
timeline {
    enabled = true
    file = "${params.output_dir}/timeline.html"
}

trace {
    enabled = true
    file = "${params.output_dir}/trace.txt"
}

report {
    enabled = true
    file = "${params.output_dir}/report.html"
}
