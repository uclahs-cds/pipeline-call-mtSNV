import nextflow.util.SysHelper

params {
    // sample
    run_name = "testing_input_intermediate_false__paired"
    
    //Single or Paired?
    sample_mode = 'paired' // 'single' or 'paired'

    // sample inputs
    input_csv = '/data/users/agonzalez/002_Nextflowization_mtSNV/20210617/pipeline-call-mtSNV/test_and_example/example_input_tiny_bam_sge.csv'

    // input/output locations
    output_dir = '/data/users/agonzalez/002_Nextflowization_mtSNV/20210617/pipeline-call-mtSNV/outputs/' // 
    temp_dir = '/scratch/'//'/data/users/agonzalez/002_Nextflowization_mtSNV/20210617/pipeline-call-mtSNV/temp_directory' // 

    // References
    directory_containing_mt_ref_genome_chrRSRS_files = '/data/users/agonzalez/002_Nextflowization_mtSNV/01_Version_1.0/01_pipeline/SGE/output/genome_fasta/'
    gmapdb = '/data/ref/mitochondria_ref/gmapdb/gmapdb_2021-03-08/gmapdb/'
    
    // Intermediate Steps
    save_intermediate_files = true
    cache_intermediate_pipeline_steps = true

    // SGE scheduler true or false?
    sge_scheduler = true 
    
    // Apply ucla-cds specific configuration? true or false 
    ucla_cds = true 

    // Replace the maximum resource values if not running on 'local' executor
    max_cpus   = SysHelper.getAvailCpus()
    max_memory = SysHelper.getAvailMemory()

}

includeConfig "methods.config"
includeConfig "base.config"

// Load Boutros Lab specific config
if (params.ucla_cds) {
    includeConfig "ucla-cds-base.config"

    node_cpus = params.max_cpus
    node_memory = params.max_memory.toString()

    // Slurm and SGE clusters have slightly different memory values presented
    if (node_cpus == 72 && (node_memory == '136.8 GB' || node_memory == '141.7 GB')) {
        includeConfig "midmem.config"
    } else if (node_cpus == 64 && (node_memory == '950 GB' || node_memory == '1007.9 GB')) {
        includeConfig "execute.config"
    } else {
        throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory}), unable to assign resources.")
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min(obj, params.max_cpus as int)
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Metadata
manifest {
    name = "call-mtSNV"
    author = "Takafumi Yamaguchi; Nextflowization by Alfredo Enrique Gonzalez "
    description = "Pipeline for calling mitochonrdial SNVs"
    version = "1.0.0"
}